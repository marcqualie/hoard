#!/usr/bin/env php
<?php

use Phalcon\DI\FactoryDefault\CLI as CliDI;
use Phalcon\CLI\Console as ConsoleApp;

define('VERSION', '1.0.0');

// Define path to application directory
define('APPLICATION_PATH', realpath(dirname(__DIR__)) . '/app');

// Using the CLI factory default services container
$di = new CliDI();

// Database Connection
$di->set('mongo', function() {
    $mongo = new MongoClient("mongodb://localhost:27017");
    return $mongo->selectDB("hoard-beta");
}, true);
$di->set('collectionManager', function(){
    return new Phalcon\Mvc\Collection\Manager();
}, true);

/**
* Register the autoloader and tell it to register the tasks directory
*/
$loader = new \Phalcon\Loader();
$loader->registerDirs([
    APPLICATION_PATH . '/models',
    APPLICATION_PATH . '/tasks'
]);
$loader->register();

// // Load the configuration file (if any)
// if (is_readable(APPLICATION_PATH . '/config/config.php')) {
//     $config = include APPLICATION_PATH . '/config/config.php';
//     $di->set('config', $config);
// }

//Create a console application
$console = new ConsoleApp();
$console->setDI($di);

/**
* Process the console arguments
*/
$arguments = array(
    'task' => 'main',
    'action' => 'main',
);
foreach ($argv as $k => $arg) {
    if ($k == 1) {
        $arguments['task'] = $arg;
        if (strpos($arg, ':') !== false) {
            list($namespace, $classname) = explode(':', $arg);
            $arguments['task'] = ucfirst($namespace) . '\\' . ucfirst($classname);
        }
    } else {
        $arguments[] = $arg;
    }
}

// define global constants for the current task and action
define('CURRENT_TASK', $arguments['task']);
define('CURRENT_ACTION', $arguments['action']);

try {
    $console->handle($arguments);
}
catch (\Phalcon\Exception $e) {
    echo $e->getMessage();
    exit(255);
}
